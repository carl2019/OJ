#include <iostream>
#include <string>
#include <set>
using namespace std;
 
int main()
{
    int n;
    while (cin >> n)
    {
        set<string> pool;
        string id, con;
        int maxSize = 0;
        for (int i = 0; i < n; ++i)
        {
            cin >> id >> con;
            if (con == "connect")
                pool.insert(id);
            else if (con == "disconnect")
                pool.erase(id);
            int size = pool.size();
            maxSize = max(maxSize, size);
        }
        cout << maxSize << endl;
    }
    return 0;
}

#include<iostream>
#include<string>
#include<vector>
#include<set>
using namespace std;
int main()
{
    int length;
    string s, next, mkdir = "mkdir -p ";
    while (cin >> length)
    {
        set<string> data;
        for (int i = 0; i < length; i++)
        {
            cin >> s;
            data.insert(s);
        }
        set<string>::iterator it = data.begin();
        s = *it;
        set<string> res;
        for (it++; it != data.end(); it++)
        {
            next = *it;
            if (next.length() < s.length())
            {
                res.insert(s);
                s = next;  
            }
            else
            {
                string t;
                for (int i = 0; i < s.length(); i++)
                    t += next[i];
                if (t == s && next[s.length()] == '/')
                    s = next;
                else
                {
                    res.insert(s);
                    s = next;
                }
            }
        }
        res.insert(s);
        for (set<string>::iterator it = res.begin(); it != res.end(); it++)
            cout << mkdir << *it << endl;
        cout << endl;
    }
    return 0;
}